'''
* 사용자 정의 모듈

- 하나의 모듈 파일에 너무 많은 코드가 들어있다면
편집이 힘들어지고, 코드를 유지, 보수하는 데 어려움이 발생합니다.

- 관리 편의상 비슷한 기능들을 가진 코드를 여러 개의 모듈에
나누어서 작성하는 것이 좋습니다.
'''

import calculator as cal

print(f'1인치: {cal.inch * 32} cm')
print(f'1부터 10까지의 누적합: {cal.calc_sum(10)}')

n1, n2 = map(int, input('정수 2개 입력: ').split())
print(f'{n1} + {n2} = {cal.add(n1, n2)}')

'''
- 배포의 목적으로 만든 모듈이라면
테스트 코드를 작성해서 다른 사용자들에게
모듈 사용법을 간단히 공개해 주면 좋겠죠?

- 아무 문법 없이 작성하면, import한 모듈에서 
테스트 코드가 노출되는 문제가 발생합니다.

- 처음부터 import를 목적으로 설계된 모듈의 테스트 코드 작성 시에는
다음과 같은 문법 하에서 테스트를 진행합니다.

ex) if __name__ == '__main__':
        test code...

- __name__ 이라는 숨겨진 변수 (내장 변수)에는
현재 실행중인 모듈의 이름이 들어가게 되는데,
현재 모듈에서 실행할 때는 이름이 main으로 저장됩니다.
다른 모듈에서 실행할 때는 이름이 모듈 이름으로 저장됩니다.
'''